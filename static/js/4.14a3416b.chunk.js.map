{"version":3,"sources":["../node_modules/redux-form/es/index.js","components/stream/Stream.js","components/portals/ModalPortal.js","components/stream/StreamList.js","components/stream/StreamForm.js","components/stream/StreamCreate.js","components/stream/StreamShow.js","components/stream/StreamEdit.js","components/google-auth/GoogleAuth.js","pages/StreamPage.js"],"names":["__webpack_require__","d","__webpack_exports__","reset","_actions__WEBPACK_IMPORTED_MODULE_0__","arrayInsert","arrayMove","arrayPop","arrayPush","arrayRemove","arrayRemoveAll","arrayShift","arraySplice","arraySwap","arrayUnshift","autofill","blur","change","clearAsyncError","clearFields","clearSubmit","clearSubmitErrors","destroy","focus","initialize","registerField","resetSection","setSubmitFailed","setSubmitSucceeded","startAsyncValidation","startSubmit","stopAsyncValidation","stopSubmit","submit","touch","unregisterField","untouch","updateSyncWarnings","updateSyncErrors","Stream","_ref","title","description","react_default","a","createElement","className","portals_ModalPortal","controls","ReactDOM","createPortal","document","querySelector","StreamList","state","streamToDelete","onDelete","stream","event","deleteStream","_this","props","id","hideDeleteModel","setState","showDeleteModal","this","fetchStreams","Fragment","renderStreamList","renderCreateControls","renderDeleteModal","_this2","streams","Object","entries","map","_ref2","slicedToArray","key","assign","react_router_dom","to","concat","renderControls","currentUserId","userId","type","onClick","bind","auth","Component","connect","ownProps","isSignedIn","StreamForm","onSubmit","formValues","dispatch","renderTextField","input","meta","label","mandatory","htmlFor","form","name","autoComplete","style","color","visited","error","renderMemoField","touched","_this$props","handleSubmit","valid","Field","component","disabled","reduxForm","validate","errors","StreamCreate","createStream","stream_StreamForm","StreamShow","fetchStream","match","params","StreamEdit","editStream","initialValues","apply","arguments","GoogleAuth","authStatusChange","signIn","currentUser","get","getId","signOut","_callee","e","signInData","regenerator_default","wrap","_context","prev","next","preventDefault","sent","console","log","t0","stop","_callee2","_context2","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","href","google_auth_GoogleAuth","MainMenu","exact","routes","react_router","path","NotFound"],"mappings":"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","file":"static/js/4.14a3416b.chunk.js","sourcesContent":["import actions from './actions';\nimport * as _actionTypes from './actionTypes';\nexport { default as defaultShouldAsyncValidate } from './defaultShouldAsyncValidate';\nexport { default as defaultShouldValidate } from './defaultShouldValidate';\nexport { default as defaultShouldError } from './defaultShouldError';\nexport { default as defaultShouldWarn } from './defaultShouldWarn';\nexport { default as Form } from './Form';\nexport { default as FormName } from './FormName';\nexport { default as FormSection } from './FormSection';\nexport { default as SubmissionError } from './SubmissionError'; // alias for propTypes\n\nexport { default as propTypes, fieldInputPropTypes, fieldMetaPropTypes, fieldPropTypes, fieldArrayFieldsPropTypes, fieldArrayMetaPropTypes, fieldArrayPropTypes, formPropTypes } from './propTypes';\nexport { default as Field } from './Field';\nexport { default as Fields } from './Fields';\nexport { default as FieldArray } from './FieldArray';\nexport { default as formValueSelector } from './formValueSelector';\nexport { default as formValues } from './formValues';\nexport { default as getFormError } from './getFormError';\nexport { default as getFormNames } from './getFormNames';\nexport { default as getFormValues } from './getFormValues';\nexport { default as getFormInitialValues } from './getFormInitialValues';\nexport { default as getFormSyncErrors } from './getFormSyncErrors';\nexport { default as getFormMeta } from './getFormMeta';\nexport { default as getFormAsyncErrors } from './getFormAsyncErrors';\nexport { default as getFormSyncWarnings } from './getFormSyncWarnings';\nexport { default as getFormSubmitErrors } from './getFormSubmitErrors';\nexport { default as isAsyncValidating } from './isAsyncValidating';\nexport { default as isDirty } from './isDirty';\nexport { default as isInvalid } from './isInvalid';\nexport { default as isPristine } from './isPristine';\nexport { default as isValid } from './isValid';\nexport { default as isSubmitting } from './isSubmitting';\nexport { default as hasSubmitSucceeded } from './hasSubmitSucceeded';\nexport { default as hasSubmitFailed } from './hasSubmitFailed';\nexport { default as reduxForm } from './reduxForm';\nexport { default as reducer } from './reducer';\nexport { default as values } from './values';\nexport var actionTypes = _actionTypes;\nexport var arrayInsert = actions.arrayInsert;\nexport var arrayMove = actions.arrayMove;\nexport var arrayPop = actions.arrayPop;\nexport var arrayPush = actions.arrayPush;\nexport var arrayRemove = actions.arrayRemove;\nexport var arrayRemoveAll = actions.arrayRemoveAll;\nexport var arrayShift = actions.arrayShift;\nexport var arraySplice = actions.arraySplice;\nexport var arraySwap = actions.arraySwap;\nexport var arrayUnshift = actions.arrayUnshift;\nexport var autofill = actions.autofill;\nexport var blur = actions.blur;\nexport var change = actions.change;\nexport var clearAsyncError = actions.clearAsyncError;\nexport var clearFields = actions.clearFields;\nexport var clearSubmit = actions.clearSubmit;\nexport var clearSubmitErrors = actions.clearSubmitErrors;\nexport var destroy = actions.destroy;\nexport var focus = actions.focus;\nexport var initialize = actions.initialize;\nexport var registerField = actions.registerField;\nexport var reset = actions.reset;\nexport var resetSection = actions.resetSection;\nexport var setSubmitFailed = actions.setSubmitFailed;\nexport var setSubmitSucceeded = actions.setSubmitSucceeded;\nexport var startAsyncValidation = actions.startAsyncValidation;\nexport var startSubmit = actions.startSubmit;\nexport var stopAsyncValidation = actions.stopAsyncValidation;\nexport var stopSubmit = actions.stopSubmit;\nexport var submit = actions.submit;\nexport var touch = actions.touch;\nexport var unregisterField = actions.unregisterField;\nexport var untouch = actions.untouch;\nexport var updateSyncWarnings = actions.updateSyncWarnings;\nexport var updateSyncErrors = actions.updateSyncErrors;","import React from 'react';\n\nexport default ({title, description}) => (\n    <div className=\"stream\">\n        <p className=\"stream__title\">{title}</p>\n        <p className=\"stream__description\">{description}</p>\n    </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./ModalPortal.scss\"\n\n// если в названии поставить [name].module.scss то соберется как css модуль а не просто jsка\n\nexport default ({title, controls}) => {\n    // если передать 2м аргументом document.body, то этот портал перетрет все что есть в боди, поэтому\n    // создаю див с id в index.html куда хочу рендерить этот портал\n    return ReactDOM.createPortal(\n        <div className=\"modal-portal\">\n            <div className=\"modal-portal__inner\">\n                <p>{title}</p>\n\n                <div className=\"modal-portal__controls\">\n                    {controls}\n                </div>\n            </div>\n        </div>,\n        document.querySelector(\"#modal\")\n    )\n}\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {deleteStream, fetchStreams} from \"../../store/actions\";\nimport Stream from \"./Stream\";\nimport {Link} from \"react-router-dom\";\nimport ModalPortal from \"../portals/ModalPortal\";\n\nclass StreamList extends Component {\n    state = {\n        streamToDelete: null\n    };\n\n    componentDidMount() {\n        this.props.fetchStreams();\n    }\n\n    render() {\n        return (\n            <>\n                {this.renderStreamList()}\n                {this.renderCreateControls()}\n                {this.renderDeleteModal()}\n            </>\n        );\n    }\n\n    renderStreamList() {\n        const {streams} = this.props;\n\n        return (\n            <ul className=\"stream-list\">\n                {\n                    Object.entries(streams)\n                        .map(([id, stream]) => {\n                            return (\n                                <li\n                                    key={id}\n                                    className=\"stream-list__item\"\n                                >\n                                    <Stream\n                                        {...stream}\n                                        title={<Link to={`/stream/${stream.id}`}>{stream.title}</Link>}\n                                    />\n\n\n\n                                    {this.renderControls(stream)}\n                                </li>\n                            );\n                        })\n                }\n            </ul>\n        );\n    }\n\n    renderControls(stream) {\n        const {currentUserId} = this.props;\n        const {userId, id} = stream;\n\n        if (userId === currentUserId) {\n            return (\n                <div className=\"stream-list__controls\">\n                    <Link to={`/stream/edit/${id}`}>Edit</Link>\n                    <button type=\"button\" onClick={this.showDeleteModal.bind(this, stream)}>Delete</button>\n                </div>\n            );\n        }\n    }\n\n    renderCreateControls() {\n        if (this.props.auth) {\n            return (\n                <p>\n                    <Link to=\"/stream/create\">Create stream -></Link>\n                </p>\n            );\n        }\n    }\n\n    renderDeleteModal() {\n        const {streamToDelete: stream} = this.state;\n\n        if (stream) {\n            const controls = <>\n                <button type=\"button\" onClick={this.onDelete.bind(this, stream)}>Delete</button>\n                <button type=\"button\" onClick={this.hideDeleteModel}>Cancel</button>\n            </>;\n\n            return <ModalPortal\n                title=\"Are u sure u wanna delete this stream?\"\n                controls={controls}\n            />\n        }\n    }\n\n    onDelete = (stream, event) => {\n        // console.log(stream);\n        // так могу достать эвент при bind(this, ...)\n        // console.log(event.target);\n\n        const {deleteStream} = this.props;\n\n        deleteStream(stream.id);\n\n        this.hideDeleteModel();\n    };\n\n    hideDeleteModel = () => {\n        this.setState({\n            streamToDelete: null\n        });\n    };\n\n    showDeleteModal = (stream) => {\n        this.setState({\n            streamToDelete: stream\n        });\n    };\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    streams: state.streams,\n    currentUserId: state.auth.userId,\n    auth: state.auth.isSignedIn,\n});\n\n\nexport default connect(mapStateToProps, {\n    fetchStreams,\n    deleteStream\n})(StreamList);\n","import React, {Component} from \"react\";\nimport {Field, reduxForm, reset} from \"redux-form\";\n\nclass StreamForm extends Component {\n    render() {\n        const {handleSubmit, valid} = this.props;\n\n        return (\n            <form\n                onSubmit={handleSubmit(this.onSubmit)}\n            >\n                <Field\n                    component={this.renderTextField}\n                    name=\"title\"\n                    label={\"Enter title\"}\n                    mandatory\n                />\n                <Field\n                    component={this.renderMemoField}\n                    name=\"description\"\n                    label={\"Enter description\"}\n                    mandatory={false}\n                />\n                <button\n                    type=\"submit\"\n                    disabled={!valid}\n                >Submit\n                </button>\n            </form>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onSubmit(formValues);\n        // clear form fields\n        this.props.dispatch(reset(\"streamCreate\"));\n    };\n\n    renderTextField = ({input, meta, label, mandatory}) => {\n        // input и meta - это набор свойств от redux-form для полей, прикольно что input даже initialValue есть\n        // input - инфаа об инпуте\n        // meta - метаинфа о филде\n        // console.log(input, meta);\n\n        return (\n            <>\n                <label htmlFor={meta.form + input.name}>\n                    {label}\n                    {mandatory && <sup>*</sup>}\n                </label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    id={meta.form + input.name}\n                    {...input}\n                />\n                <p style={{color: \"red\"}}>\n                    {meta.visited && meta.error}\n                </p>\n            </>\n        );\n    };\n\n    renderMemoField = ({input, meta, label, mandatory}) => {\n        return (\n            <>\n                <label htmlFor={meta.form + input.name}>\n                    {label}\n                    {mandatory && <sup>*</sup>}\n                </label>\n                <textarea\n                    id={meta.form + input.name}\n                    {...input}\n                />\n                <p style={{color: \"red\"}}>\n                    {meta.touched && meta.error}\n                </p>\n            </>\n        );\n    };\n}\n\n\nfunction validate(formValues) {\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = \"Please fill title\";\n    }\n\n    return errors;\n}\n\nexport default reduxForm({\n    form: \"streamForm\",\n    validate\n})(StreamForm);\n\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {createStream} from \"../../store/actions\";\nimport StreamForm from \"./StreamForm\";\nimport {Link} from \"react-router-dom\";\n\nclass StreamCreate extends Component {\n    render() {\n        return (\n            <>\n                <StreamForm\n                    onSubmit={this.onSubmit}\n                />\n\n                <p>\n                    <Link to=\"/stream\">Go to stream list -></Link>\n                </p>\n            </>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        this.props.createStream(formValues);\n    };\n}\n\n\nexport default connect(null, {createStream})(StreamCreate);\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {fetchStream} from \"../../store/actions\";\nimport {Link} from \"react-router-dom\";\n\nclass StreamShow extends Component {\n    componentDidMount() {\n        const {fetchStream, match} = this.props;\n\n        fetchStream(match.params.id);\n    }\n\n    render() {\n        const {stream} = this.props;\n\n        if (stream) {\n            return (\n                <>\n                    <h3>Stream show</h3>\n                    <p>Stream title: {stream.title}</p>\n                    <p>Stream description: {stream.description}</p>\n                    <Link to=\"/stream\">Go to stream list</Link>\n                </>\n            );\n        } else {\n            return <div>...Loading</div>;\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    stream: state.streams[ownProps.match.params.id]\n});\n\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);\n","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {editStream, fetchStream} from \"../../store/actions\";\nimport StreamForm from \"./StreamForm\";\nimport {Link} from \"react-router-dom\";\n\nclass StreamEdit extends Component {\n    componentDidMount() {\n        // все что внутри Router получает в пропсы параметры от роутинга: history, location, match\n        this.props.fetchStream(this.props.match.params.id);\n    }\n\n    render() {\n        const {stream} = this.props;\n        // initialValues - это спец свойство redux form, сразу подставятся в инпуты\n        // initialValues - это объект и в данном случае он равен stream\n\n        if (stream) {\n            const {title, description} = stream;\n\n            return (\n                <>\n                    <h3>Edit stream</h3>\n                    <StreamForm\n                        initialValues={{title, description}}\n                        onSubmit={this.onSubmit.bind(this)}\n                    />\n\n                    <p>\n                        <Link to=\"/stream\">Go to stream list -></Link>\n                    </p>\n                </>\n            );\n        } else {\n            return (\n                <div>...Loading</div>\n            );\n        }\n    }\n\n    onSubmit = (formValues) => {\n        this.props.editStream(this.props.match.params.id, formValues);\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    stream: state.streams[ownProps.match.params.id]\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    fetchStream: (id) => {\n        dispatch(fetchStream(id));\n    },\n    editStream: (...args) => {\n        dispatch(editStream(...args));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreamEdit);\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {signIn, signOut} from \"../../store/actions/auth\";\n\nclass GoogleAuth extends Component {\n    // так как перевел на редакс, то стейт хранить уже не нужно, но для примера оставлю и в стейте!!!\n    // state = {\n    //     isSignedIn: null\n    // };\n\n    componentDidMount() {\n        window.gapi && window.gapi.load(\"client:auth2\", () => {\n            window.gapi.client.init({\n                clientId: \"356527932784-volcn5md0nd1eg5nc2hn30cd6a6oeclf.apps.googleusercontent.com\",\n                scope: \"email\"\n            }).then(\n                () => {\n                    this.auth = window.gapi.auth2.getAuthInstance();\n\n                    this.auth.isSignedIn.listen(this.authStatusChange);\n\n                    // так как перевел на редакс, то стейт хранить уже не нужно, но для примера оставлю и в стейте!!!\n                    // this.setState({isSignedIn: this.auth.isSignedIn.get()});\n\n                    // кидаю экшены в редакс на коллбек auth\n                    this.authStatusChange(this.auth.isSignedIn.get());\n\n                    // console.log(\"GoogleAuth gapi.client.init inited\");\n                },\n                () => console.log(\"GoogleAuth gapi.client.init error\")\n            );\n        });\n\n    }\n\n    authStatusChange = (isSignedIn) => {\n        // сохраняю в стейт\n        // логиню юзера по id\n        isSignedIn ? this.props.signIn(this.auth.currentUser.get().getId()) : this.props.signOut();\n\n        // так как перевел на редакс, то стейт хранить уже не нужно, но для примера оставлю и в стейте!!!\n        // this.setState({\n        //     isSignedIn\n        // });\n\n        // console.log(\"User auth status changed to: \", isSignedIn);\n    };\n\n    signIn = async (e) => {\n        e.preventDefault();\n\n        try {\n            const signInData = await this.auth.signIn();\n            console.log('User signed in ', signInData);\n        } catch (e) {\n            console.log(\"GoogleAuth signIn error \", e);\n        }\n    };\n\n    signOut = async (e) => {\n        e.preventDefault();\n\n        try {\n            await this.auth.signOut();\n            console.log('User signed out.');\n        } catch (e) {\n            console.log('GoogleAuth signed out error ', e);\n        }\n    };\n\n    render() {\n        // const {isSignedIn} = this.state;\n\n        // так как перевел на редакс, то стейт хранить уже не нужно, но для примера оставлю и в стейте!!!\n        const {isSignedIn} = this.props;\n\n        if (isSignedIn === null) {\n            return \"Auth is loading...\"\n        }\n\n        return (\n            <>\n                {isSignedIn\n                    ? <a href=\"/\" onClick={this.signOut}>Sign out</a>\n                    : <a href=\"/\" onClick={this.signIn}>Sign in</a>\n                }\n\n                <div>Google auth</div>\n            </>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state, ownProps) => ({\n    isSignedIn: state.auth.isSignedIn\n});\n\n\nexport default connect(mapStateToProps, {signIn, signOut})(GoogleAuth);\n","import React from \"react\";\nimport NotFound from \"../components/NotFound\";\nimport {Route, Switch} from \"react-router-dom\";\nimport MainMenu from \"../components/menu/MainMenu\";\nimport StreamList from \"../components/stream/StreamList\";\nimport StreamCreate from \"../components/stream/StreamCreate\";\nimport StreamShow from \"../components/stream/StreamShow\";\nimport StreamEdit from \"../components/stream/StreamEdit\";\nimport GoogleAuth from \"../components/google-auth/GoogleAuth\";\n\n// const RouterLazyRoute = React.lazy(() => import('../components/router/RouterLazyRoute'));\n\nexport default () => {\n    return (\n        <>\n            <h3>Router examples</h3>\n\n            <GoogleAuth/>\n\n            <MainMenu exact routes={[\n                {to: \"/stream\", title: \"StreamList\"},\n                {to: \"/stream/create\", title: \"StreamCreate\"},\n            ]}/>\n\n            {/*по умолчанию если роуты не обернуть в Switch в случае /stream/create покажется также /stream/:id, чтобы\n            этого избежать оборачиваю в Switch, покажется только первый подходящий роут*/}\n            <Switch>\n                <Route path=\"/stream\" exact component={StreamList}/>\n                <Route path=\"/stream/create\" exact component={StreamCreate}/>\n                <Route path=\"/stream/edit/:id\" exact component={StreamEdit}/>\n                <Route path=\"/stream/:id\" exact component={StreamShow}/>\n                <Route path=\"/stream/*\">\n                    <NotFound>\n                        Stream not found\n                    </NotFound>\n                </Route>\n            </Switch>\n\n        </>\n    );\n}\n"],"sourceRoot":""}