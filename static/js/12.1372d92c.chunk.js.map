{"version":3,"sources":["components/component/Component.js","context/LanguageContext.js","components/context/test/ContextButton.js","components/context/test/ContextField.js","components/context/test/ContextCreate.js","components/context/test/ContextTest.js","context/OutsideChangeContext.js","components/context/outside-change/OutsideChangeContextInner.js","components/context/outside-change/OutsideChangeContextWrapper.js","pages/ContextPage.js"],"names":["title","children","className","React","createContext","text","useContext","LanguageContext","type","label","htmlFor","id","ContextField","ContextButton","ContextTest","Component","state","language","onLanguageChange","event","preventDefault","this","setState","render","href","onClick","bind","Provider","value","ContextCreate","setValue","memo","OutsideChangeContext","JSON","stringify","name","onChange","useState","contextValue","setContextValue","target","OutsideChangeContextInner","OutsideChangeContextWrapper"],"mappings":"iHAAA,2BAGe,MAAGA,QAAOC,cACrB,yBAAKC,UAAU,aACX,wBAAIA,UAAU,oBAAoBF,GAClC,yBAAKE,UAAU,mBAAmBD,K,wGCJ3BE,G,OAAAA,IAAMC,cAAc,OCCpB,OACX,IACMC,EAAoB,OADTC,qBAAWC,GACK,SAAW,qEAE5C,OAAO,4BAAQC,KAAK,UAAUH,ICJnB,OACX,IACMI,EAAqB,OADVH,qBAAWC,GACM,OAAS,qBAE3C,OACI,2BACI,2BAAOG,QAAQ,oBAAoBD,GACnC,2BAAOD,KAAK,OAAOG,GAAG,uBCNnB,MACX,6BACI,kBAACC,EAAD,MACA,kBAACC,EAAD,OCFO,MAAMC,UAAoBC,YAAW,eAAD,oBAC/CC,MAAQ,CACJC,SAAU,MAFiC,KA8B/CC,iBAAmB,CAACD,EAAUE,KAC1BA,EAAMC,iBAENC,KAAKC,SAAS,CACVL,cA7BRM,SACI,OACI,yBAAKrB,UAAU,gBAAf,mBAEI,uBACIA,UAAU,qBACVsB,KAAK,IACLC,QAASJ,KAAKH,iBAAiBQ,KAAKL,KAAM,OAH9C,MAOA,uBACInB,UAAU,qBACVsB,KAAK,IACLC,QAASJ,KAAKH,iBAAiBQ,KAAKL,KAAM,OAH9C,MAOA,kBAACd,EAAgBoB,SAAjB,CAA0BC,MAAOP,KAAKL,MAAMC,UACxC,kBAACY,EAAD,S,qBC3BL1B,MAAMC,cAAc,CAAEwB,MAAO,GAAIE,SAAU,SCC3CC,iBAAK,KAAO,IAAD,EACMzB,qBAAW0B,GAA/BF,EADc,EACdA,SAAUF,EADI,EACJA,MAElB,OACI,sDACoBK,KAAKC,UAAUN,GAC/B,4BAAQO,KAAK,uBAAuBC,SAAUN,GAC1C,4BAAQF,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,SCRDG,iBAAK,KAAO,IAAD,EACkBM,mBAAS,MAD3B,mBACfC,EADe,KACDC,EADC,KAOtB,OACI,oCACI,kBAACP,EAAqBL,SAAtB,CACIC,MAAO,CAAEA,MAAOU,EAAcR,SAPzBX,IACboB,EAAgBpB,EAAMqB,OAAOZ,UAQrB,kBAACa,EAAD,UCXDV,yBAAK,IAEZ,oCACI,kBAAChB,EAAA,EAAD,CAAWf,MAAM,gBACb,kBAAC0C,EAAD,OAGJ,kBAAC3B,EAAA,EAAD,CAAWf,MAAM,oBACb,kBAAC,EAAD","file":"static/js/12.1372d92c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Component.scss\";\n\nexport default ({ title, children }) => (\n    <div className=\"component\">\n        <h3 className=\"component__title\">{title}</h3>\n        <div className=\"component__body\">{children}</div>\n    </div>\n);\n","import React from \"react\";\n\nexport default React.createContext(\"ru\");\n","import React, { useContext } from \"react\";\nimport LanguageContext from \"../../../context/LanguageContext\";\n\nexport default () => {\n    const language = useContext(LanguageContext);\n    const text = language === \"en\" ? \"Submit\" : \"Подтвердить\";\n\n    return <button type=\"button\">{text}</button>;\n};\n\n// раньше надо было делать через класс или consumer но с 16.8 можно использовать useContext\n// export default class ContextButton extends Component {\n//     static contextType = LanguageContext;\n//\n//     render() {\n//         console.log(this.context);\n//\n//         const text = this.context === \"en\" ? \"Submit\" : \"Подтвердить\";\n//\n//         return (\n//             <button type=\"button\">{text}</button>\n//         );\n//     }\n// }\n\n// вариант как делалось раньше через LanguageContext.Consumer\n// export default () => {\n//     return (\n//         <button type=\"button\">\n//             <LanguageContext.Consumer>\n//                 {(value) => value === \"en\" ? \"Submit\" : \"Подтвердить\"}\n//             </LanguageContext.Consumer>\n//\n//         </button>\n//     );\n// }\n","import React, { useContext } from \"react\";\nimport LanguageContext from \"../../../context/LanguageContext\";\n\nexport default () => {\n    const language = useContext(LanguageContext);\n    const label = language === \"en\" ? \"Name\" : \"Имя\";\n\n    return (\n        <p>\n            <label htmlFor=\"contextFieldName\">{label}</label>\n            <input type=\"text\" id=\"contextFieldName\" />\n        </p>\n    );\n};\n","import React from \"react\";\nimport ContextButton from \"./ContextButton\";\nimport ContextField from \"./ContextField\";\n\nexport default () => (\n    <div>\n        <ContextField />\n        <ContextButton />\n    </div>\n);\n","import React, { Component } from \"react\";\nimport \"./ContextTest.scss\";\nimport ContextCreate from \"./ContextCreate\";\nimport LanguageContext from \"../../../context/LanguageContext\";\n\nexport default class ContextTest extends Component {\n    state = {\n        language: \"en\"\n    };\n\n    render() {\n        return (\n            <div className=\"context-test\">\n                Select language:\n                <a\n                    className=\"context-test__link\"\n                    href=\"/\"\n                    onClick={this.onLanguageChange.bind(this, \"en\")}\n                >\n                    en\n                </a>\n                <a\n                    className=\"context-test__link\"\n                    href=\"/\"\n                    onClick={this.onLanguageChange.bind(this, \"ru\")}\n                >\n                    ru\n                </a>\n                <LanguageContext.Provider value={this.state.language}>\n                    <ContextCreate />\n                </LanguageContext.Provider>\n            </div>\n        );\n    }\n\n    onLanguageChange = (language, event) => {\n        event.preventDefault();\n\n        this.setState({\n            language\n        });\n    };\n}\n","import React from \"react\";\n\nexport default React.createContext({ value: {}, setValue: () => {} });\n","import React, { memo, useContext } from \"react\";\nimport OutsideChangeContext from \"../../../context/OutsideChangeContext\";\n\nexport default memo(() => {\n    const { setValue, value } = useContext(OutsideChangeContext);\n\n    return (\n        <>\n            Context value: {JSON.stringify(value)}\n            <select name=\"outsideContextSelect\" onChange={setValue}>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n            </select>\n        </>\n    );\n});\n","import React, { memo, useState } from \"react\";\nimport OutsideChangeContext from \"../../../context/OutsideChangeContext\";\nimport OutsideChangeContextInner from \"./OutsideChangeContextInner\";\n\nexport default memo(() => {\n    const [contextValue, setContextValue] = useState(null);\n\n    const setValue = event => {\n        setContextValue(event.target.value);\n    };\n\n    return (\n        <>\n            <OutsideChangeContext.Provider\n                value={{ value: contextValue, setValue }}\n            >\n                <OutsideChangeContextInner />\n            </OutsideChangeContext.Provider>\n        </>\n    );\n});\n","import React, { memo } from \"react\";\nimport ContextTest from \"../components/context/test/ContextTest\";\nimport Component from \"../components/component/Component\";\nimport OutsideChangeContextWrapper from \"../components/context/outside-change/OutsideChangeContextWrapper\";\n\nexport default memo(() => {\n    return (\n        <>\n            <Component title=\"OusideChange\">\n                <OutsideChangeContextWrapper />\n            </Component>\n\n            <Component title=\"Language example\">\n                <ContextTest />\n            </Component>\n        </>\n    );\n});\n"],"sourceRoot":""}