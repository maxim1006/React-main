{"version":3,"sources":["pages/typescript/hooks/reducer/typescript-reducer-hooks.component.tsx","pages/typescript/enum/typescript-enum.component.tsx","pages/typescript/hooks/typescript-hooks.component.tsx","pages/typescript/default-props/typescript-default-props.component.tsx","pages/typescript/form/typescript-form.component.tsx","pages/typescript/typeof-partial-omit-return-type.tsx","pages/typescript/typescript.page.tsx"],"names":["initialState","count","reducer","state","action","type","payload","Number","Error","Colors","memo","React","useReducer","dispatch","onClick","ref1","useRef","ref2","inputEl","useEffect","console","log","current","focus","ref","age","useState","name","setName","value","onChange","e","currentTarget","window","customProp","TypescriptEnumChild","color","style","TypescriptEnum","red","setColor","target","MainMenu","routes","to","title","path","component","TypescriptHooks"],"mappings":"oKAMMA,EAAe,CAAEC,MAAO,GAI9B,SAASC,EAAQC,EAA4BC,GACzC,OAAQA,EAAOC,MACX,IAAK,YACD,MAAO,CAAEJ,MAAOE,EAAMF,MAAQG,EAAOE,SACzC,IAAK,YACD,MAAO,CAAEL,MAAOE,EAAMF,MAAQM,OAAOH,EAAOE,UAChD,QACI,MAAM,IAAIE,OAItB,ICjBKC,ED4BUC,kBAXgB,WAC3B,MAA0BC,IAAMC,WAAWV,EAASF,GAApD,mBAAOG,EAAP,KAAcU,EAAd,KACA,OACI,8CACYV,EAAMF,MACd,4BAAQa,QAAS,kBAAMD,EAAS,CAAER,KAAM,YAAaC,QAAS,QAA9D,KACA,4BAAQQ,QAAS,kBAAMD,EAAS,CAAER,KAAM,YAAaC,QAAS,MAA9D,SEOGI,kBA3BS,WAQpB,IAAMK,EAAOC,iBAAuB,MAC9BC,EAAOD,iBAA8B,MACrCE,EAAUF,iBAAgC,MAOhD,OALAG,qBAAU,WACNC,QAAQC,IAAIN,EAAKO,QAASL,EAAKK,SAC/BJ,EAAQI,QAAQC,UACjB,IAGC,oCACI,yBAAKC,IAAKT,GAAV,QACA,yBAAKS,IAAKP,GAAV,QACA,2BAAOO,IAAKN,EAASb,KAAK,SAC1B,kBAAC,EAAD,UCVGK,kBAfgC,SAAC,GAAD,QAAGe,WAAH,MAAS,GAAT,SAAkB,4CAAQA,MCY1Df,kBAdQ,WACnB,MAAwBgB,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACI,oCACI,2BAAOvB,KAAK,OAAOsB,KAAK,OAAOE,MAAOF,EAAMG,SAN/B,SAACC,GAClBH,EAAQG,EAAEC,cAAcH,c,OCiChCT,QAAQC,IAAKY,OAAeC,Y,SJnCvBzB,K,UAAAA,E,eAAAA,M,KASL,IAAM0B,EAAsBzB,gBAA+B,YAAgB,IAAb0B,EAAY,EAAZA,MAC1D,OAAO,yBAAKC,MAAO,CAAED,UAAd,qBAsBIE,EAnBQ5B,gBAA0B,WAC7C,MAA0BgB,mBAAiBjB,EAAO8B,KAAlD,mBAAOH,EAAP,KAAcI,EAAd,KAEA,OACI,oCACI,4BACIV,SAAU,SAAAC,GACNS,EAAST,EAAEU,OAAOZ,SAGtB,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,UAGJ,kBAACM,EAAD,CAAqBC,MAAOA,QKVzB1B,0BAZQ,WACnB,OACI,oCACI,kBAAC,EAAD,MACA,kBAACgC,EAAA,EAAD,CAAUC,OAAQ,CAAC,CAAEC,GAAI,oBAAqBC,MAAO,YACrD,kBAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAWC,IAC3C,kBAAC,EAAD,MACA,kBAAC,EAAD","file":"static/js/19.c7865689.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\n// In Redux\n// import { Reducer } from 'redux';\n// export function reducer: Reducer<AppState, Action>() {}\n\nconst initialState = { count: 0 };\n\ntype ACTIONTYPE = { type: 'increment'; payload: number } | { type: 'decrement'; payload: string };\n\nfunction reducer(state: typeof initialState, action: ACTIONTYPE) {\n    switch (action.type) {\n        case 'increment':\n            return { count: state.count + action.payload };\n        case 'decrement':\n            return { count: state.count - Number(action.payload) };\n        default:\n            throw new Error();\n    }\n}\n\nconst TypescriptReducerHooks = () => {\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    return (\n        <>\n            Count: {state.count}\n            <button onClick={() => dispatch({ type: 'decrement', payload: '5' })}>-</button>\n            <button onClick={() => dispatch({ type: 'increment', payload: 5 })}>+</button>\n        </>\n    );\n};\n\nexport default memo(TypescriptReducerHooks);\n","import React, { memo, useState } from 'react';\n\ntype TypescriptEnumProps = {};\n\nenum Colors {\n    red = 'red',\n    green = 'green',\n}\n\ntype TypescriptEnumChildProps = {\n    color: Colors;\n};\n\nconst TypescriptEnumChild = memo<TypescriptEnumChildProps>(({ color }) => {\n    return <div style={{ color }}>TypescriptEnum</div>;\n});\n\nconst TypescriptEnum = memo<TypescriptEnumProps>(() => {\n    const [color, setColor] = useState<Colors>(Colors.red);\n\n    return (\n        <>\n            <select\n                onChange={e => {\n                    setColor(e.target.value as Colors);\n                }}\n            >\n                <option value=\"red\">red</option>\n                <option value=\"green\">green</option>\n            </select>\n\n            <TypescriptEnumChild color={color} />\n        </>\n    );\n});\n\nexport default TypescriptEnum;\n","import React, { memo, useEffect, useRef } from 'react';\nimport TypescriptReducerHooks from './reducer/typescript-reducer-hooks.component';\n\ninterface UserModel {\n    name?: string;\n}\n\nconst TypescriptHooks = () => {\n    // const [user, setUser] = useState<UserModel | null>(null);\n\n    /* null! is a non-null assertion operator (the !).\n    null! is a non-null assertion operator (the !).\n    It asserts that any expression before it is not null or undefined, so if you have useRef<HTMLElement>(null!)\n    it means that you're instantiating the ref with a current value of null but lying to TypeScript that it's not null.\n     */\n    const ref1 = useRef<HTMLDivElement>(null!);\n    const ref2 = useRef<HTMLDivElement | null>(null);\n    const inputEl = useRef<HTMLInputElement | null>(null);\n\n    useEffect(() => {\n        console.log(ref1.current, ref2.current);\n        inputEl.current.focus();\n    }, []);\n\n    return (\n        <>\n            <div ref={ref1}>Ref1</div>\n            <div ref={ref2}>Ref2</div>\n            <input ref={inputEl} type=\"text\" />\n            <TypescriptReducerHooks />\n        </>\n    );\n};\n\nexport default memo(TypescriptHooks);\n","import React, { FC, memo } from 'react';\n\ntype GreetProps = { age?: number };\n\nconst TypescriptDefaultProps: FC<GreetProps> = ({ age = 21 }) => <>Age: {age}</>;\n\n// Если все же зачем-то нужно использовать то делаю так:\n// type TypescriptDefaultPropsProps = { age: number } & typeof defaultProps;\n//\n// const defaultProps = {\n//     age: 33,\n// };\n//\n// const TypescriptDefaultProps: FC<TypescriptDefaultPropsProps> = ({ age }) => {\n//     return <>Age: {age}</>;\n// };\n//\n// TypescriptDefaultProps.defaultProps = defaultProps;\n//\nexport default memo(TypescriptDefaultProps);\n","import React, { memo, useState } from 'react';\n\nconst TypescriptForm = () => {\n    const [name, setName] = useState<string>('');\n\n    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        setName(e.currentTarget.value);\n    };\n\n    return (\n        <>\n            <input type=\"text\" name=\"name\" value={name} onChange={onNameChange} />\n        </>\n    );\n};\n\nexport default memo(TypescriptForm);\n","import React from 'react';\n\n// @ts-ignore\nimport { ButtonBase } from '@material-ui/core';\n\nexport const o = {\n    foo: 1,\n    bar: 2,\n};\n\nexport const o1: typeof o = {\n    foo: 3,\n    bar: 1,\n};\n\nexport const o2: Partial<typeof o> = {\n    bar: 1,\n};\n\n// Grabbing the Prop types of a component: Use React.ComponentProps and typeof,\n// and optionally Omit any overlapping types\ntype ButtonProps = React.ComponentProps<typeof ButtonBase>; // no problem! grab your own!\ntype AlertButtonProps = Omit<ButtonProps, 'onClick'>; // modify\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst AlertButton: React.FC<AlertButtonProps> = props => <ButtonBase onClick={() => alert('hello')} {...props} />;\n\n// You may also use ComponentPropsWithoutRef (instead of ComponentProps)\n// and ComponentPropsWithRef (if your component specifically forwards refs)\n\n// Grabbing the return type of a function: use ReturnType:\n// Copy;\n// inside some library - return type { baz: number } is inferred but not exported\nfunction foo(bar: string) {\n    return { baz: 1 };\n}\n\n//  inside your app, if you need { baz: number }\ntype FooReturn = ReturnType<typeof foo>; // { baz: number }\n\nconsole.log((window as any).customProp);\n","import React, { memo } from 'react';\nimport MainMenu from '../../components/menu/MainMenu';\nimport { Route } from 'react-router-dom';\nimport TypescriptHooks from './hooks/typescript-hooks.component';\nimport TypescriptDefaultProps from './default-props/typescript-default-props.component';\nimport TypescriptForm from './form/typescript-form.component';\nimport './typeof-partial-omit-return-type';\nimport TypescriptEnum from './enum/typescript-enum.component';\n\nconst TypescriptPage = () => {\n    return (\n        <>\n            <TypescriptEnum />\n            <MainMenu routes={[{ to: '/typescript/hooks', title: 'Hooks' }]} />\n            <Route path=\"/typescript/hooks\" component={TypescriptHooks} />\n            <TypescriptDefaultProps />\n            <TypescriptForm />\n        </>\n    );\n};\n\nexport default memo(TypescriptPage);\n"],"sourceRoot":""}