{"version":3,"sources":["redux-toolkit/rt-slices/rt-counter.ts","components/redux-toolkit/counter/rt-counter.component.tsx","redux-toolkit/rt-slices/rt-todos.ts","redux-toolkit/rt-slices/rt-visibility-filters.ts","redux-toolkit/rt-slices/rt-issues-display.ts","redux-toolkit/rt-slices/rt-posts.ts","redux-toolkit/rt-slices/index.ts","redux-toolkit/rt-configureStore.ts","redux-toolkit/rt-selectors/rt-todos.ts","components/redux-toolkit/todos/rt-todos.component.tsx","components/redux-toolkit/issues-display/rt-issues-display.component.tsx","components/redux-toolkit/posts/rt-posts.component.tsx","pages/redux-toolkit/rt.page.tsx"],"names":["rtCounterSlice","createSlice","name","initialState","reducers","rtIncrement","state","rtDecrement","actions","memo","dispatch","useDispatch","counter","useSelector","type","onClick","nextTodoId","rtTodosSlice","rtAddTodo","reducer","payload","id","text","push","completed","prepare","rtToggleTodo","todo","find","rtVisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","rtVisibilityFilterSlice","rtSetVisibilityFilter","issuesDisplaySlice","org","repo","page","displayType","issueId","rtDisplayRepo","rtSetCurrentPage","action","rtSetCurrentDisplayType","rtPostsSlice","loading","entities","fetchPostsSuccess","fetchPostsError","error","combineReducers","todos","visibilityFilter","issuesDisplay","posts","persistConfig","key","version","storage","whitelist","persistedReducer","persistReducer","rootReducer","RtStore","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","preloadedState","devTools","process","enhancers","reduxBatch","RtPersistor","persistStore","selectRtVisibleTodos","createSelector","filter","i","useState","todoText","setTodoText","onFilterClick","e","preventDefault","onTodoClick","onSubmit","trim","value","onChange","target","Object","values","map","index","href","style","marginRight","length","textDecoration","useEffect","a","getState","customAxios","get","data","console","log","MaterialLoader","slice","title","body","margin","store","persistor"],"mappings":"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","file":"static/js/22.864fc6d8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// createSlice returns a \"slice\" object that contains the generated reducer function as a field named reducer,\n// and the generated action creators inside an object called actions.\n// const { actions, reducer } = counterSlice\n// const { increment, decrement } = actions\nexport const rtCounterSlice = createSlice({\n    name: 'counter',\n    initialState: 0,\n    reducers: {\n        rtIncrement: state => state + 1,\n        rtDecrement: state => state - 1,\n    },\n});\n\nexport const { rtIncrement, rtDecrement } = rtCounterSlice.actions;\n\nexport default rtCounterSlice.reducer;\n\n/*\n* createSlice returns an object that looks like this:\n\n{\n  name: \"counter\",\n  reducer: (state, action) => newState,\n  actions: {\n    rtIncrement: (payload) => ({type: \"counter/rtIncrement\", payload}),\n    rtDecrement: (payload) => ({type: \"counter/rtDecrement\", payload})\n  },\n  caseReducers: {\n    rtIncrement: (state, action) => newState,\n    rtDecrement: (state, action) => newState,\n  }\n}*/\n","import React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rtIncrement, rtDecrement } from '../../../redux-toolkit/rt-slices/rt-counter';\nimport { RtRootState } from '../../../redux-toolkit/rt-configureStore';\n\nconst RtCounter = () => {\n    const dispatch = useDispatch();\n    const counter = useSelector<RtRootState>(state => state.counter);\n    return (\n        <div>\n            {/* reduxBatch - поэтому могу вызывать 2 экшена за раз*/}\n            <button type=\"button\" onClick={() => dispatch([rtIncrement(), rtIncrement()])}>\n                Increment twice\n            </button>\n            <button type=\"button\" onClick={() => dispatch(rtDecrement())}>\n                Decrement\n            </button>\n            <p>{counter}</p>\n        </div>\n    );\n};\n\nexport default memo(RtCounter);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TodoModel } from '../models/todo.model';\n\n// createSlice and createReducer wrap your function with produce from the Immer library.\n// https://immerjs.github.io/immer/docs/introduction\n\nlet nextTodoId = 0;\n\nconst rtTodosSlice = createSlice({\n    name: 'todos',\n    initialState: [],\n    // reducers - an object, where the keys will become action type strings, and the functions are reducers that will\n    // be run when that action type is dispatched.\n    reducers: {\n        rtAddTodo: {\n            reducer: (state, { payload }: PayloadAction<TodoModel>) => {\n                const { id, text } = payload;\n                state.push({ id, text, completed: false });\n            },\n            // если нужно кастомно подготовить то что прокидываю в экшн, по умолчанию все что передасться при\n            // вызове экшена попадет в пейлоад, однако если нужен кастом делаю prepare\n            prepare: (text: string): { payload: TodoModel } => ({ payload: { text, id: nextTodoId++ } }),\n        },\n        rtToggleTodo(state, { payload }: PayloadAction<number>) {\n            const todo = state.find(todo => todo.id === payload);\n\n            if (todo) {\n                todo.completed = !todo.completed;\n            }\n        },\n    },\n});\n\nexport const { rtAddTodo, rtToggleTodo } = rtTodosSlice.actions;\n\nexport default rtTodosSlice.reducer;\n\n/*\n* createSlice returns an object that looks like this:\n\n{\n  name: \"todos\",\n  reducer: (state, action) => newState,\n  actions: {\n    rtAddTodo: (payload) => ({type: \"todos/addTodo\", payload}),\n    rtToggleTodo: (payload) => ({type: \"todos/toggleTodo\", payload})\n  },\n  caseReducers: {\n    rtAddTodo: (state, action) => newState,\n    rtToggleTodo: (state, action) => newState,\n  }\n}*/\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const rtVisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE',\n};\n\nconst rtVisibilityFilterSlice = createSlice({\n    name: 'visibilityFilter',\n    initialState: rtVisibilityFilters.SHOW_ALL,\n    reducers: {\n        rtSetVisibilityFilter: (state, { payload }: PayloadAction<string>) => payload,\n    },\n});\n\nexport const { rtSetVisibilityFilter } = rtVisibilityFilterSlice.actions;\n\nexport default rtVisibilityFilterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IssuesDisplayModel, IssuesDisplayRepoModel, IssuesDisplayStateModel } from '../models/issues-display.model';\n\nlet initialState: IssuesDisplayStateModel = {\n    org: 'rails',\n    repo: 'rails',\n    page: 1,\n    displayType: 'issues',\n    issueId: null,\n};\n\nconst issuesDisplaySlice = createSlice({\n    name: 'issuesDisplay',\n    initialState,\n    reducers: {\n        rtDisplayRepo(state, { payload }: PayloadAction<IssuesDisplayRepoModel>) {\n            const { org, repo } = payload;\n            state.org = org;\n            state.repo = repo;\n        },\n        rtSetCurrentPage(state, action: PayloadAction<number>) {\n            state.page = action.payload;\n        },\n        rtSetCurrentDisplayType(state, { payload }: PayloadAction<IssuesDisplayModel>) {\n            const { displayType, issueId = null } = payload;\n            state.displayType = displayType;\n            state.issueId = issueId;\n        },\n    },\n});\n\nexport const { rtDisplayRepo, rtSetCurrentPage, rtSetCurrentDisplayType } = issuesDisplaySlice.actions;\n\nexport default issuesDisplaySlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { PostModel } from '../models/posts.model';\nimport { RtAppThunk } from '../rt-configureStore';\nimport customAxios from '../../common/api/axios';\n\ninterface PostsStateModel {\n    loading: boolean;\n    entities: PostModel[];\n    error?: Error;\n}\n\nconst initialState: PostsStateModel = {\n    loading: false,\n    entities: [],\n};\n\nconst rtPostsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        fetchPostsSuccess(state, { payload }: PayloadAction<PostModel[]>) {\n            state.entities = payload;\n        },\n        fetchPostsError(state, { payload }: PayloadAction<Error>) {\n            state.error = payload;\n        },\n    },\n});\n\nexport const { fetchPostsSuccess, fetchPostsError } = rtPostsSlice.actions;\n\nexport default rtPostsSlice.reducer;\n\n// thunks redux toolkit не умеет поэтому ручками пишем (хорошие новости что включены из коробки)\nexport const rtFetchPostsAction = (): RtAppThunk => async (dispatch, getState) => {\n    // console.log(getState());\n    try {\n        const { data: posts } = await customAxios.get('https://jsonplaceholder.typicode.com/posts');\n        dispatch(fetchPostsSuccess(posts));\n\n        return posts;\n    } catch (error) {\n        dispatch(fetchPostsError(error));\n        console.error('error ', error);\n    }\n};\n","import { combineReducers } from 'redux';\nimport counter from './rt-counter';\nimport todos from './rt-todos';\nimport visibilityFilter from './rt-visibility-filters';\nimport issuesDisplay from './rt-issues-display';\nimport posts from './rt-posts';\n\nexport default combineReducers({\n    counter,\n    todos,\n    visibilityFilter,\n    issuesDisplay,\n    posts,\n});\n","import { Action, configureStore, getDefaultMiddleware, ThunkAction } from '@reduxjs/toolkit';\nimport rootReducer from './rt-slices';\nimport { reduxBatch } from '@manaflair/redux-batch';\nimport logger from 'redux-logger';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n// автоматически подцепляет дев тулы\n\n// через стандартные редюсеры\n// const RtStore = configureStore({\n//     reducer: RtCounterReducer\n// });\n\n// const middleware = [...getDefaultMiddleware(), logger];\n//\nconst preloadedState = {};\n\nconst persistConfig = {\n    key: 'root',\n    version: 1,\n    storage,\n    // по умолчанию в локалсторадж складывает все, тут указываю что конкретно, также есть blackList\n    whitelist: ['todos'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst RtStore = configureStore({\n    reducer: persistedReducer,\n    middleware: [\n        ...getDefaultMiddleware({\n            serializableCheck: {\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        }),\n        logger,\n    ],\n    preloadedState,\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers: [reduxBatch],\n});\n\nexport const RtPersistor = persistStore(RtStore);\n\n// через слайсы без persist\n// const RtStore = configureStore({\n//     reducer: rootReducer,\n//     middleware,\n//     preloadedState,\n//     devTools: process.env.NODE_ENV !== 'production',\n//     enhancers: [reduxBatch],\n// });\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n    module.hot.accept('./rt-slices', () => {\n        const newRootReducer = require('./rt-slices').default;\n        RtStore.replaceReducer(newRootReducer);\n    });\n}\n\nexport type RtRootState = ReturnType<typeof rootReducer>;\n\n// так как часто использую сразу вынесу сюда чтобы не копи пастить\nexport type RtAppThunk = ThunkAction<void, RtRootState, unknown, Action<string>>;\n\nexport default RtStore;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { rtVisibilityFilters } from '../rt-slices/rt-visibility-filters';\nimport { RtRootState } from '../rt-configureStore';\n\nconst selectTodos = (state: RtRootState) => state.todos;\nconst selectVisibilityFilter = (state: RtRootState) => state.visibilityFilter;\n\nexport const selectRtVisibleTodos = createSelector([selectTodos, selectVisibilityFilter], (todos, visibilityFilter) => {\n    switch (visibilityFilter) {\n        case rtVisibilityFilters.SHOW_ALL: {\n            return todos;\n        }\n        case rtVisibilityFilters.SHOW_COMPLETED: {\n            return todos.filter(i => i.completed);\n        }\n        case rtVisibilityFilters.SHOW_ACTIVE: {\n            return todos.filter(i => !i.completed);\n        }\n        default:\n            return todos;\n    }\n});\n","import React, { ChangeEvent, memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rtAddTodo, rtToggleTodo } from '../../../redux-toolkit/rt-slices/rt-todos';\nimport { rtSetVisibilityFilter, rtVisibilityFilters } from '../../../redux-toolkit/rt-slices/rt-visibility-filters';\nimport { selectRtVisibleTodos } from '../../../redux-toolkit/rt-selectors';\nimport { RtRootState } from '../../../redux-toolkit/rt-configureStore';\nimport { TodoModel } from '../../../redux-toolkit/models/todo.model';\n\nconst RtTodos = () => {\n    const dispatch = useDispatch();\n    const todos = useSelector<RtRootState>(selectRtVisibleTodos) as TodoModel[];\n    const [todoText, setTodoText] = useState('');\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => setTodoText(e.target.value);\n\n    const onFilterClick = (filter: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n        e.preventDefault();\n        dispatch(rtSetVisibilityFilter(filter));\n    };\n\n    const onTodoClick = (id: number) => () => {\n        dispatch(rtToggleTodo(id));\n    };\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    if (!todoText.trim()) {\n                        return;\n                    }\n                    dispatch(rtAddTodo(todoText));\n                    setTodoText('');\n                }}\n            >\n                <input value={todoText} onChange={onChange} />\n                <button type=\"submit\">Add Todo</button>\n            </form>\n            <div>\n                {Object.values(rtVisibilityFilters).map((filter, index) => (\n                    <a onClick={onFilterClick(filter)} href=\"/\" style={{ marginRight: 5 }} key={index}>\n                        {filter}\n                    </a>\n                ))}\n            </div>\n            {todos.length > 0 && (\n                <ul>\n                    {todos.map(({ text, id, completed }) => (\n                        <li\n                            style={{ textDecoration: completed ? 'line-through' : 'none' }}\n                            onClick={onTodoClick(id)}\n                            key={id}\n                        >\n                            {text}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default memo(RtTodos);\n","import React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RtRootState } from '../../../redux-toolkit/rt-configureStore';\n\nconst RtIssuesDisplay = () => {\n    const { org, displayType, page } = useSelector((state: RtRootState) => state.issuesDisplay);\n\n    return <>{`${org} ${displayType} ${page}`}</>;\n};\n\nexport default memo(RtIssuesDisplay);\n","import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rtFetchPostsAction } from '../../../redux-toolkit/rt-slices/rt-posts';\nimport { RtRootState } from '../../../redux-toolkit/rt-configureStore';\nimport MaterialLoaderComponent from '../../loader/MaterialLoader';\n\nconst RtPosts = () => {\n    const dispatch = useDispatch();\n    const posts = useSelector((state: RtRootState) => state.posts);\n\n    useEffect(() => {\n        (async () => {\n            //  пример thunk возвращает промис с результатом запроса, круто чтобы чейнинг использовать !!!\n            const posts = await dispatch(rtFetchPostsAction());\n            console.log(posts);\n        })();\n    }, [dispatch]);\n\n    return posts.loading ? (\n        <MaterialLoaderComponent />\n    ) : (\n        <ul>\n            {posts.entities.slice(0, 5).map(({ id, title, body }) => (\n                <li style={{ margin: 10 }} key={id}>\n                    <h5>{title}</h5>\n                    <p>{body}</p>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default memo(RtPosts);\n","import React, { memo } from 'react';\nimport { Provider } from 'react-redux';\nimport RtCounter from '../../components/redux-toolkit/counter/rt-counter.component';\nimport RtStore, { RtPersistor } from '../../redux-toolkit/rt-configureStore';\nimport RtTodos from '../../components/redux-toolkit/todos/rt-todos.component';\nimport RtIssuesDisplay from '../../components/redux-toolkit/issues-display/rt-issues-display.component';\nimport RtPosts from '../../components/redux-toolkit/posts/rt-posts.component';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst Rt = () => {\n    return (\n        <Provider store={RtStore}>\n            {/* должен обернуть в гейт чтобы подгрузилась инфа из локал сторадж*/}\n            <PersistGate loading={null} persistor={RtPersistor}>\n                <RtCounter />\n                <RtTodos />\n                <RtIssuesDisplay />\n                <RtPosts />\n            </PersistGate>\n        </Provider>\n    );\n};\n\nexport default memo(Rt);\n"],"sourceRoot":""}