{"version":3,"sources":["components/component/Component.js","components/hooks/use-state/HooksUseStateFamily.js","components/hooks/use-state/HooksUseStateCounter.js","components/hooks/use-context/use-context.hook.tsx","components/hooks/use-context/use-context.container.tsx","pages/HooksPage.js"],"names":["title","children","className","memo","familyNames","useState","name","setName","type","onClick","nameIndex","indexOf","currentNameIndex","length","counter","setCounter","prevCounter","UseContextHookContext","React","createContext","UseContextHookProvider","initData","console","log","result","setResult","loading","setLoading","getInfo","useCallback","number","a","customAxios","get","data","error","useEffect","providerValue","useMemo","Provider","value","UseContextContainer","inputRef","useRef","useContext","toString","MaterialLoader","completed","ref","disabled","current","trim","parseFloat","Component","HooksUseStateFamily","HooksUseStateCounter"],"mappings":"iHAAA,2BAGe,oBAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACX,yBAAKC,UAAU,aACX,wBAAIA,UAAU,oBAAoBF,GAClC,yBAAKE,UAAU,mBAAmBD,M,mGCJ3BE,kBAAK,WAChB,IAAMC,EAAc,CAAC,MAAO,QAAS,OAAQ,SAE7C,EAAwBC,mBAAS,OAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OACI,yBAAKL,UAAU,iBACX,4BAAQM,KAAK,SAASC,QARb,WACb,IAAIC,EAAYN,EAAYO,QAAQL,GAC9BM,IAAqBF,EAAYN,EAAYS,OACnDN,EAAQH,EAAYQ,MAKhB,aAGA,0BAAMV,UAAU,wBAAwBI,OCdrCH,kBAAK,WAChB,MAA4BE,mBAAS,GAArC,mBAAKS,EAAL,KAAcC,EAAd,KAOA,OACI,yBAAKb,UAAU,iBACX,4BAAQM,KAAK,SAASC,QANb,kBAAMM,GAAW,SAAAC,GAAW,QAAMA,OAM3C,YAGA,0BAAMd,UAAU,wBAAwBY,GACxC,4BAAQN,KAAK,SAASC,QARb,kBAAMM,IAAaD,KAQ5B,gB,+BCFCG,EAAwBC,IAAMC,cAAgC,MAE9DC,EAAyB,SAAC,GAMhC,IALHC,EAKE,EALFA,SACApB,EAIE,EAJFA,SAKAqB,QAAQC,IAAI,KACZ,MAA4BlB,qBAA5B,mBAAOmB,EAAP,KAAeC,EAAf,KACA,EAA8BpB,qBAA9B,mBAAOqB,EAAP,KAAgBC,EAAhB,KAEMC,EAAUC,sBAAW,uCACvB,WAAOC,GAAP,iBAAAC,EAAA,6DACIJ,GAAW,GADf,kBAI8DK,IAAYC,IAAZ,4DACJH,QADI,IACJA,IAAUT,EAASS,SAL7E,gBAIgBI,EAJhB,EAIgBA,KAGRT,EAAUS,GAPlB,gDASQZ,QAAQa,MAAM,wCAAd,MATR,yBAWQR,GAAW,GAXnB,4EADuB,sDAevB,CAACN,IAGLe,qBAAU,WACNR,MACD,CAACA,IAEJ,IAAMS,EAAgBC,mBAAQ,iBAAO,CAAEd,SAAQI,UAASF,aAAY,CAACA,EAASE,EAASJ,IAEvF,OAAO,kBAACP,EAAsBsB,SAAvB,CAAgCC,MAAOH,GAAgBpC,I,QCfnDwC,EAhCatC,gBAA+B,WACvD,IAAMuC,EAAWC,iBAAyB,MAC1C,EDgDgCzB,IAAM0B,WAAW3B,GChDzCO,EAAR,EAAQA,OAAQI,EAAhB,EAAgBA,QAASF,EAAzB,EAAyBA,QAEzB,OACI,2CACKA,QADL,IACKA,OADL,EACKA,EAASmB,WACTnB,EACG,kBAACoB,EAAA,EAAD,MAEA,qDACYtB,QADZ,IACYA,OADZ,EACYA,EAAQxB,MADpB,uBACwCwB,QADxC,IACwCA,OADxC,EACwCA,EAAQuB,UAAUF,YAI9D,2BAAOG,IAAKN,EAAUlC,KAAK,SAC3B,4BACIyC,SAAUvB,EACVjB,QAAS,WACL,IAAM+B,EAAQE,EAASQ,QAAQV,MAE3BA,EAAMW,QACNvB,EAAQwB,WAAWZ,MAN/B,gBCyBGrC,0BAxCG,WACd,OACI,oCACI,kBAACkD,EAAA,EAAD,CAAWrD,MAAM,4BACb,kBAAC,EAAD,CAAwBqB,SAAU,CAAES,OAAQ,IACxC,kBAAC,EAAD,QAwBR,kBAACuB,EAAA,EAAD,CAAWrD,MAAM,YACb,kBAACsD,EAAD,MACA,kBAACC,EAAD","file":"static/js/18.ed8f138f.chunk.js","sourcesContent":["import React from 'react';\nimport './Component.scss';\n\nexport default ({ title, children }) => (\n    <div className=\"component\">\n        <h3 className=\"component__title\">{title}</h3>\n        <div className=\"component__body\">{children}</div>\n    </div>\n);\n","import React, { memo, useState } from 'react';\n\nexport default memo(() => {\n    const familyNames = ['Max', 'Aliya', 'Lili', 'Alice'];\n\n    const [name, setName] = useState('Max');\n\n    const showName = () => {\n        let nameIndex = familyNames.indexOf(name);\n        const currentNameIndex = ++nameIndex % familyNames.length;\n        setName(familyNames[currentNameIndex]);\n    };\n\n    return (\n        <div className=\"hooks-counter\">\n            <button type=\"button\" onClick={showName}>\n                Show name\n            </button>\n            <span className=\"hooks-counter__value\">{name}</span>\n        </div>\n    );\n});\n","import React, { memo, useState } from 'react';\n\n// Стейт сохраняется в течение жизни компоненты. Каждое изменение стейта триггерит перезапуск функции компонента.\n\nexport default memo(() => {\n    let [counter, setCounter] = useState(0);\n\n    // можно использовать как функцию аля как в setSate((prevState) => ...)\n    const decrease = () => setCounter(prevCounter => --prevCounter);\n    // можно просто сетить значение\n    const increase = () => setCounter(++counter);\n\n    return (\n        <div className=\"hooks-counter\">\n            <button type=\"button\" onClick={decrease}>\n                decrease\n            </button>\n            <span className=\"hooks-counter__value\">{counter}</span>\n            <button type=\"button\" onClick={increase}>\n                increase\n            </button>\n        </div>\n    );\n});\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport customAxios from '../../../common/api/axios';\n\ninterface JSONPlaceholderTodo {\n    completed: boolean;\n    id: number;\n    title: string;\n    userId: number;\n}\n\ninterface ContextHookModel {\n    result?: JSONPlaceholderTodo;\n    getInfo?: (number?: number) => Promise<void>;\n    loading?: boolean;\n}\n\nexport const UseContextHookContext = React.createContext<ContextHookModel>(null);\n\nexport const UseContextHookProvider = ({\n    initData,\n    children,\n}: {\n    initData: { number: number };\n    children?: React.ReactNode;\n}) => {\n    console.log(123);\n    const [result, setResult] = useState<JSONPlaceholderTodo>();\n    const [loading, setLoading] = useState<boolean>();\n\n    const getInfo = useCallback(\n        async (number?: number) => {\n            setLoading(true);\n\n            try {\n                const { data }: { data: JSONPlaceholderTodo } = await customAxios.get(\n                    `https://jsonplaceholder.typicode.com/todos/${number ?? initData.number}`,\n                );\n                setResult(data);\n            } catch (e) {\n                console.error('UseContextHookProvider getInfo error ', e);\n            } finally {\n                setLoading(false);\n            }\n        },\n        [initData],\n    );\n\n    useEffect(() => {\n        getInfo();\n    }, [getInfo]);\n\n    const providerValue = useMemo(() => ({ result, getInfo, loading }), [loading, getInfo, result]);\n\n    return <UseContextHookContext.Provider value={providerValue}>{children}</UseContextHookContext.Provider>;\n};\n\nexport const UseContextHook = () => React.useContext(UseContextHookContext);\n","import React, { memo, useRef } from 'react';\nimport { UseContextHook } from './use-context.hook';\nimport MaterialLoaderComponent from '../../loader/MaterialLoader';\n\ntype UseContextContainerProps = {};\n\nconst UseContextContainer = memo<UseContextContainerProps>(() => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const { result, getInfo, loading } = UseContextHook();\n\n    return (\n        <>\n            {loading?.toString()}\n            {loading ? (\n                <MaterialLoaderComponent />\n            ) : (\n                <>\n                    Title: {result?.title}, Completed: {result?.completed.toString()}\n                </>\n            )}\n\n            <input ref={inputRef} type=\"text\" />\n            <button\n                disabled={loading}\n                onClick={() => {\n                    const value = inputRef.current.value;\n\n                    if (value.trim()) {\n                        getInfo(parseFloat(value));\n                    }\n                }}\n            >\n                Get todo\n            </button>\n        </>\n    );\n});\n\nexport default UseContextContainer;\n","import React, { memo } from 'react';\nimport Component from '../components/component/Component';\nimport HooksUseStateFamily from '../components/hooks/use-state/HooksUseStateFamily';\nimport HooksUseStateCounter from '../components/hooks/use-state/HooksUseStateCounter';\nimport { UseContextHookProvider } from '../components/hooks/use-context/use-context.hook';\nimport UseContextContainer from '../components/hooks/use-context/use-context.container';\n\nconst HooksPage = () => {\n    return (\n        <>\n            <Component title=\"UseLayoutEffectComponent\">\n                <UseContextHookProvider initData={{ number: 1 }}>\n                    <UseContextContainer />\n                </UseContextHookProvider>\n            </Component>\n            {/* <Component title=\"UseLayoutEffectComponent\"> */}\n            {/*    <UseLayoutEffectComponent /> */}\n            {/* </Component> */}\n            {/* <Component title=\"UseMemoHook\"> */}\n            {/* <UseMemoHook /> */}\n            {/* </Component> */}\n            {/* <Component title=\"UseReducerHook\">*/}\n            {/*    <UseReducerHook/>*/}\n            {/* </Component>*/}\n            {/* <Component title=\"UseRefHook\">*/}\n            {/*    <UseRefHook/>*/}\n            {/* </Component>*/}\n            {/* <Component title=\"memo\">*/}\n            {/*    <MemoHooks/>*/}\n            {/* </Component>*/}\n            {/* <Component title=\"useCallback\">*/}\n            {/*    <UseCallbackHooks/>*/}\n            {/* </Component>*/}\n            {/* <Component title=\"useEffect\">*/}\n            {/*    <HooksUseEffectFamily/>*/}\n            {/* </Component>*/}\n            <Component title=\"useState\">\n                <HooksUseStateFamily />\n                <HooksUseStateCounter />\n            </Component>\n            {/* <Component title=\"Posts and Todos\">*/}\n            {/*    <HooksPostsAndTodos/>*/}\n            {/* </Component>*/}\n        </>\n    );\n};\n\nexport default memo(HooksPage);\n"],"sourceRoot":""}